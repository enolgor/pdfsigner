name: Release CLI
permissions:
  contents: write
on:
  push:
    tags:
      - 'cli/v*'
jobs:
  create-draft-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Create Draft GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          gh release create "$VERSION" --title "$VERSION" --notes "Draft release for $VERSION" --draft || true
  build-and-release:
    name: Build & Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, 386, arm64]
        exclude:
          - goos: darwin
            goarch: 386
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'
      - name: Set tag and version env vars
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/cli/}" >> $GITHUB_ENV
      - name: Build CLI binary
        working-directory: ./cli
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          EXT=""
          if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
          OUTPUT="pdfsigner-${VERSION}-${GOOS}-${GOARCH}${EXT}"
          go build -ldflags "-X main.Version=$VERSION" -o "../dist/$OUTPUT" .
      - name: Upload binaries to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          for bin in dist/*; do
            gh release upload "$VERSION" "$bin" --clobber
          done
